openapi: 3.0.3
info:
  title: Contract Management System API
  description: API documentation for the Contract Management System
  version: 1.0.0

servers:
  - url: http://localhost:8080/api/v1
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: Validation error: Email already taken

    Organization:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        type:
          type: string
          enum: [business, government, non_profit, individual]
        status:
          type: string
          enum: [active, inactive, suspended]
        website:
          type: string
          nullable: true
        email:
          type: string
          format: email
        phone:
          type: string
          nullable: true
        address:
          type: object
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateOrganizationRequest:
      type: object
      required:
        - name
        - email
        - type
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [business, government, non_profit, individual]
        website:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: object

    UpdateOrganizationRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [business, government, non_profit, individual]
        status:
          type: string
          enum: [active, inactive, suspended]
        website:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: object

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        organization_id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        role:
          type: string
          enum: [admin, manager, user]
        status:
          type: string
          enum: [active, inactive, suspended]
        last_login_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateUserRequest:
      type: object
      required:
        - organization_id
        - email
        - password
        - first_name
        - last_name
        - role
      properties:
        organization_id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        first_name:
          type: string
        last_name:
          type: string
        role:
          type: string
          enum: [admin, manager, user]

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        first_name:
          type: string
        last_name:
          type: string
        role:
          type: string
          enum: [admin, manager, user]
        status:
          type: string
          enum: [active, inactive, suspended]

    AuthenticateRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthenticateResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'

    Contract:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [draft, pending_signature, active, suspended, terminated]
        contract_type:
          type: string
        provider_id:
          type: string
          format: uuid
        consumer_id:
          type: string
          format: uuid
        terms:
          type: object
        valid_from:
          type: string
          format: date-time
        valid_until:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ContractSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [draft, pending_signature, active, suspended, terminated]
        created_at:
          type: string
          format: date-time
        provider_name:
          type: string
        consumer_name:
          type: string

security:
  - bearerAuth: []

paths:
  /auth/login:
    post:
      security: []
      tags:
        - Authentication
      summary: Authenticate user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticateRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticateResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /organizations:
    get:
      tags:
        - Organizations
      summary: List organizations
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, suspended]
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of organizations
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Organization'
                  total:
                    type: integer

    post:
      tags:
        - Organizations
      summary: Create organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
      responses:
        '201':
          description: Organization created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid

  /organizations/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      tags:
        - Organizations
      summary: Get organization details
      responses:
        '200':
          description: Organization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Organizations
      summary: Update organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationRequest'
      responses:
        '200':
          description: Organization updated
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Organizations
      summary: Delete organization
      responses:
        '204':
          description: Organization deleted
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    get:
      tags:
        - Users
      summary: List users
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          schema:
            type: integer
            default: 10
        - name: organization_id
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, suspended]
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer

    post:
      tags:
        - Users
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid

  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      tags:
        - Users
      summary: Get user details
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Users
      summary: Update user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Users
      summary: Delete user
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /contracts:
    get:
      tags:
        - Contracts
      summary: List contracts
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, pending_signature, active, suspended, terminated]
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of contracts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ContractSummary'
                  total:
                    type: integer

  /contracts/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      tags:
        - Contracts
      summary: Get contract details
      responses:
        '200':
          description: Contract details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contract'
        '404':
          description: Contract not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /contracts/{id}/sign:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    post:
      tags:
        - Contracts
      summary: Sign contract
      responses:
        '200':
          description: Contract signed
        '404':
          description: Contract not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid contract state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /contracts/{id}/terminate:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    post:
      tags:
        - Contracts
      summary: Terminate contract
      responses:
        '200':
          description: Contract terminated
        '404':
          description: Contract not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid contract state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 